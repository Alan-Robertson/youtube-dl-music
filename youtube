#!/bin/bash
# PREFACE: Downloading content from the internet for personal use (not distribution)
# is not illegal (criminal law or copyright infringement); but by using this
# script, you are breaking Youtube's Terms of Service (civil law).
#
# This script downloads and saves audio from a youtube url into an aac/m4a file (the native
# format of youtube audio), applies metadata based on the user-input name, and normalizes the audio/volume.
#   * If you just want to download the m4a files and do nothing else, comment out
#       the parts below that adjust the volume/add metadata.
#   * To change the download location, edit the DIRECTORY variable.
#   * If youtube-dl STOPS WORKING, it is often because youtube.com has changed how they store
#       video/audio. The youtube-dl developers are very active and usually will release an updated
#       version within a couple days; just call youtube-dl -U ("update") and it should start working again.
#
# REQUIREMENTS:
#   * youtube-dl (brew install youtube-dl with Homebrew on Mac;
#       see github: https://github.com/rg3/youtube-dl)
#   * ffmpeg (conda install ffmpeg [any anaconda distribution],
#       or brew install ffmpeg with Homebrew on Mac)
#   * ffmpeg-normalize (python package for normalizing volume, requires ffmpeg accessible from shell;
#       pip install ffmpeg-normalize; see github: https://github.com/slhck/ffmpeg-normalize)
#   * mutagen (python package for writine metadata; conda install mutagen, pip install mutagen, etc;
#       see github: https://github.com/quodlibet/mutagen)
#
# USEAGE:
#     youtube <URL> <filename>
#
#     Filename can have un-escaped spaces. Escape any quotes/apostraphes. Metadata will be INFERRED from 
#     filename if you follow the format <Artist> - <Title>; everything left of space-dash-space
#     is artist, everything to the right is title. Makes life easier when using media player.
#
# SUGGESTION: 
# Use Swinsian instead of iTunes for playback. The two dealbreakers are:
# 1) iTunes can't "watch" folders, and the only hope is some complicated/non-trivial hack involving with 
# the "Automatically add to iTunes" folder (which couldn't get to work; maybe have to close/re-open) 
# 2) browsing between files is difficult (there is no filename table, and
# typing out the name of something to jump to that point in the list is, inexplicably, extremely slow)

# Initial stuff
directory=$(realpath ~/Google\ Drive/Playlist)
name="${@:2}" # select all args (@) from 2 to end
url="$1" # the original URL
if [ -z "$url" ]; then
  echo "ERROR: Must supply URL."
  exit 1
fi
if [ -z "$name" ]; then
  echo "ERROR: Must supply output filename."
  exit 1
fi

# Download, using youtube-dl
path="$directory/$name.m4a" # the filename
if [ -f "$path" ]; then # must remove any old download, or get errors with youtube-dl
  echo "Removing old file..."
  rm "$path"
fi
echo "Downloading $url into filename: $name"
youtube-dl -f bestaudio[ext=m4a] --no-playlist --prefer-ffmpeg "$url" -o "$path" # no playlist, in case user provides playlist URL
# youtube-dl -f bestaudio[ext=m4a] --no-playlist --prefer-ffmpeg --embed-thumbnail "$url" -o "$path"
# youtube-dl -f bestaudio[ext=m4a] -t "$name" --metadata-from-title "%(artist)s - %(title)s" --no-playlist --prefer-ffmpeg --embed-thumbnail "$url" -o "$path"

# Normalize audio and re-compress into AAC
echo "Normalizing volume to -26dB."
ffmpeg-normalize -uf -a aac "$path"
  # -a specifies audiocodec; see help info, this is wav file (ideal sense we don't want to recompress the raw data)
mv "$directory/normalized-$name.m4a" "$path"

# Normalize output and get raw WAV data (much more space)
# ffmpeg-normalize "$directory/$name.m4a"
# mv "$directory/normalized-$name.wav" "$directory/$name.wav"
# rm "$path"

# Change metadata using python function
metadata --noconfirmalbum "$url" "$path"

