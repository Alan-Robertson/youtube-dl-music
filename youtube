#!/bin/bash
# This function is a simple wrapper around some useful open-source command-line
# tools to download and normalize youtube audio into the AAC (extension .m4a) format;
# we choose this format because it matches the compression of .mp3 but has much improved
# audio quality at similar bitrate. Also runs the file through a python metadata-tagging script.

# Download directory; default is where I keep my music
directory="$(cat $(dirname $(realpath $0))/config | grep "directory" | cut -s -d '=' -f 2 | xargs)"
  # cut will automatically trim leading/trailing whitespace it seems
directory="${directory/"~"/$HOME}" # don't expand spaces, but expand ~
directory="${directory%/}" # trim trailing slash if present
if [ ! -d "$directory" ]; then
  echo "ERROR: Directory \"$directory\" does not exist,"\
    "or the directory was not declared/incorrectly declared in the config file."
  exit 1
fi

# Parsing of filename and input
name="${@:2}" # select all args (@) from 2 to end
url="$1" # the original URL
if [ -z "$url" ]; then
  echo "ERROR: Must supply URL."
  exit 1
fi
if [ -z "$name" ]; then
  echo "ERROR: Must supply output filename."
  exit 1
fi

# Download, using youtube-dl
path="$directory/$name.m4a" # the filename
if [ -f "$path" ]; then # must remove any old download, or get errors with youtube-dl
  echo "Removing old file..."
  rm "$path"
fi
echo "Downloading $url into filename: $name"
youtube-dl -f bestaudio[ext=m4a] --no-playlist --prefer-ffmpeg "$url" -o "$path" # no playlist, in case user provides playlist URL
# youtube-dl -f bestaudio[ext=m4a] --no-playlist --prefer-ffmpeg --embed-thumbnail "$url" -o "$path"
# youtube-dl -f bestaudio[ext=m4a] -t "$name" --metadata-from-title "%(artist)s - %(title)s" --no-playlist --prefer-ffmpeg --embed-thumbnail "$url" -o "$path"

# Normalize audio and re-compress into AAC
echo "Normalizing volume to -26dB."
ffmpeg-normalize -uf -a aac "$path"
  # -a specifies audiocodec; see help info, this is wav file (ideal sense we don't want to recompress the raw data)
mv "$directory/normalized-$name.m4a" "$path"
# Normalize output and get raw WAV data (unfortunately WAV is impossible to tag :( )
# ffmpeg-normalize "$directory/$name.m4a"
# mv "$directory/normalized-$name.wav" "$directory/$name.wav"
# rm "$path"

# Change metadata using python function
# Do this quickly, so don't ask for user confirmation
metadata --url="$url" "$path"

