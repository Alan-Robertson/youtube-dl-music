#!/usr/bin/env bash
#------------------------------------------------------------------------------#
# This function is a simple wrapper around some useful open-source command-line
# tools to download, normalize, and tag youtube audio. 3 steps:
# 1) Download audio into native format with highest bitrate -- usually an OOG (webm) file.
# 2) Normalize the volume of that audio and re-compress into AAC (m4a) file -- do this
#    because m4a matches compression of mp3 but with much improved audio quality at marginal bitrates.
# 3) Tag the audio based on only two sources of information, specified by the user --
#    an "artist" and a "title". The tagging script does various fuzzy searching things
#    to get year of release, album name, album artwork, and genres.
#------------------------------------------------------------------------------#
# Parse input, including optional flags

# For people who don't want to add ydm to their path
# Change this to wherever you put ydm
ydmpath="/home/USER/Music/youtube-dl-music"

# Force extention type with this
# Incomplete, just ffmpeg everything yourself if you need to
ext="opus"

mp3=false   # mp3 or m4a by default?
quick=0     # 1 means skip metadata, 2 means skip normalization
metadata=true   # by default, retrieve metadata and noarmalize
classical=false # different folder for classical music
normflags="-t -23" # normalize to default of -23
search=false
$mp3 && ext_new="mp3" || ext_new="m4a"
verbose=false

while [ $# -gt 0 ]; do
  case $1 in
    -3|--mp3)        mp3=true  ;; # m4a is better format so generally want to avoid this
    -4|--m4a|--aac)  mp3=false ;;
    -q|--quick)      quick=1 ;;
    -Q|--very-quick) quick=2 ;;
    -cl|--classical) classical=true; ;;
    -c=*|--cut-leading)  lead=${1#*=} ;; # cut leading time, seconds
    -C=*|--cut-trailing) trail=${1#*=} ;; # cut trailing time, seconds
    -s|--search) search=true; ;;
    -v|--verbose) verbose=true; ;;
    -[-a-zA-Z0-9]*)  metaflags+="$1" ;;
    http*) url="$1"; ;;    # youtube url
    *)     name+=" $1"; ;; # so user can specify filename without spaces
  esac
  shift
done

if $search; then
    url=`youtube-dl --get-url --default-search "ytsearch" "ytsearch:$name" --extract-audio` 
    read -a strarr <<< "$url"
    url=${strarr[0]}

fi

if $verbose; then 
  ytdl_flags+=' -v '
  metaflags+=' -v '
fi

# 'Extra' arguments for trimming time; can be passed to ffmpeg-normalize
# See this link for trimming: https://superuser.com/questions/258032/is-it-possible-to-use-ffmpeg-to-trim-off-x-seconds-from-the-beginning-of-a-video
trimflag="-e=" # open
if [ ! -z $lead ]; then
  echo "Trimming first $lead seconds."
  trimflag+="-ss $lead "
fi
if [ ! -z $trail ]; then
  echo "Trimming last $trail seconds."
  trimflag+="-sseof $trail "
fi
# Trim trialing spaces for filenames
name="${name# }"
name="${name% }"

echo " Name: $name"
echo " URL: $url"

[ -z "$url" ] && echo "Error: Must supply URL." && exit 1
[ -z "$name" ] && echo "Error: Must supply output filename." && exit 1

# Download directory; default is where I keep my music
# Note 'cut' will automatically trim leading/trailing whitespace it seems
directory="$(cat $(dirname $(realpath $0))/config | grep "directory" | cut -s -d '=' -f 2 | xargs)"
directory="${directory/"~"/$HOME}" # don't expand spaces, but expand ~
directory="${directory%/}" # trim trailing slash if present
if $classical; then
  directory="${directory%/*}/classical"
fi

rejects="$(cat $(dirname $(realpath $0))/config | grep "rejects" | cut -s -d '=' -f 2 | xargs)"
rejects="${rejects/"~"/$HOME}"
rejects="${rejects%/}"
[[ ! -d "$directory" ]] && echo "Error: Directory \"$directory\" does not exist,"\
  "or the directory was not declared/incorrectly declared in the config file." && exit 1


#------------------------------------------------------------------------------#
# Extract song name and artist name
#------------------------------------------------------------------------------#
IFS='-'

read -a strarr <<< "$name"
artist=${strarr[0]}
song=${strarr[1]}

IFS=' '
#Trim trailing whitespace
artist="$(echo -e "${artist}" | sed -e 's/[[:space:]]*$//')"
#read -a strarr <<< "$artist"
#artist=${strarr[0]}

# Make directory if it doesn't exist
mkdir -p "$directory/$artist"

if $verbose; then
  echo $artist
  echo $song
fi

# A few basic settings
# TODO: Support for downloading entire playlists or albums

if $verbose; then
  echo "Avaliable Formats:"
  youtube-dl -F $url
fi

path_template="$directory/$artist/$name.%(ext)s" # see youtube-dl help info; just picks whatever extension

ytdl_flags="--no-playlist --format bestaudio --extract-audio"

#------------------------------------------------------------------------------#
# Download, using youtube-dl
#------------------------------------------------------------------------------#
echo "Determining filetype..."
path="$(youtube-dl --get-filename "$url" -o "$path_template")" 
[ -z "$path" ] && echo "Error: Could not get name." && exit 1
ext_downloaded="${path##*.}"

if $verbose; then
  echo "Ext: $ext_downloaded"
fi

if [ "$ext_downloaded" = "unknown_video" ]; then
  ext_downloaded="opus"
fi
ext=$ext_downloaded

echo "$ext"

echo "Downloading..."

youtube-dl $ytdl_flags "$url" -o "$path_template" 
[ $? -ne 0 ] && echo "Error: Download failed." && exit 1
[ $quick -ge 2 ] && exit 0

#------------------------------------------------------------------------------#
# Change metadata using python function
#------------------------------------------------------------------------------#
echo "Adding metadata."

if [ -z ${ydmpath+x} ] 
then 
  $ydmpath/ydm-metadata $metaflags -u="$url" "$directory/$artist/$name.$ext"
else 
  ydm-metadata $metaflags -u="$url" "$directory/$artist/$name.$ext"
fi
[ $? -ne 0 ] && echo "Error: Metadata script failed." && exit 1